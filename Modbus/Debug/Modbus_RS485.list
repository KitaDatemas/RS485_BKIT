
Modbus_RS485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  0000525c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea0  08003ea0  0000525c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  08003ea8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000525c  2**0
                  CONTENTS
 10 .bss          0000026c  2000025c  2000025c  0000525c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  0000525c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000525c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d823  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002001  00000000  00000000  00012aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00014ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fb  00000000  00000000  00015778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002142f  00000000  00000000  00016173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f95a  00000000  00000000  000375a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caf40  00000000  00000000  00046efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111e3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003894  00000000  00000000  00111e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  00115714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000025c 	.word	0x2000025c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e68 	.word	0x08003e68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000260 	.word	0x20000260
 80001c4:	08003e68 	.word	0x08003e68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80004c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004c8:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d018      	beq.n	8000506 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	81fb      	strh	r3, [r7, #14]
 80004d8:	e011      	b.n	80004fe <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 80004da:	8afb      	ldrh	r3, [r7, #22]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	b29a      	uxth	r2, r3
 80004e0:	8af9      	ldrh	r1, [r7, #22]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	1c58      	adds	r0, r3, #1
 80004e6:	6138      	str	r0, [r7, #16]
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	404b      	eors	r3, r1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4909      	ldr	r1, [pc, #36]	@ (8000514 <crc16+0x5c>)
 80004f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004f4:	4053      	eors	r3, r2
 80004f6:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 80004f8:	89fb      	ldrh	r3, [r7, #14]
 80004fa:	3301      	adds	r3, #1
 80004fc:	81fb      	strh	r3, [r7, #14]
 80004fe:	89fa      	ldrh	r2, [r7, #14]
 8000500:	887b      	ldrh	r3, [r7, #2]
 8000502:	429a      	cmp	r2, r3
 8000504:	d3e9      	bcc.n	80004da <crc16+0x22>
        }
    }

    return crc;
 8000506:	8afb      	ldrh	r3, [r7, #22]
}
 8000508:	4618      	mov	r0, r3
 800050a:	371c      	adds	r7, #28
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	20000000 	.word	0x20000000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fe74 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81a 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f922 	bl	800076c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000528:	f000 f880 	bl	800062c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f8ca 	bl	80006c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f8f2 	bl	8000718 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Modbus_Init(MODBUS_SLAVE, 0x11, 3, 10);
 8000534:	230a      	movs	r3, #10
 8000536:	2203      	movs	r2, #3
 8000538:	2111      	movs	r1, #17
 800053a:	2001      	movs	r0, #1
 800053c:	f000 f960 	bl	8000800 <Modbus_Init>
  Modbus_Receive(&huart1, sendData, sizeof(sendData)/sizeof(sendData[0]));
 8000540:	2208      	movs	r2, #8
 8000542:	4903      	ldr	r1, [pc, #12]	@ (8000550 <main+0x38>)
 8000544:	4803      	ldr	r0, [pc, #12]	@ (8000554 <main+0x3c>)
 8000546:	f000 fa35 	bl	80009b4 <Modbus_Receive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Process();
 800054a:	f000 fb13 	bl	8000b74 <Modbus_Process>
 800054e:	e7fc      	b.n	800054a <main+0x32>
 8000550:	20000350 	.word	0x20000350
 8000554:	200002c0 	.word	0x200002c0

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fbf0 	bl	8003d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	@ 0xa8
 80005ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f9c5 	bl	800196c <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 f903 	bl	80007f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fc26 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 f8ec 	bl	80007f2 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	@ 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_TIM2_Init+0x94>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800064e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_TIM2_Init+0x94>)
 8000652:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_TIM2_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_TIM2_Init+0x94>)
 8000660:	2209      	movs	r2, #9
 8000662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_TIM2_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_TIM2_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000670:	4813      	ldr	r0, [pc, #76]	@ (80006c0 <MX_TIM2_Init+0x94>)
 8000672:	f001 fe13 	bl	800229c <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f8b9 	bl	80007f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <MX_TIM2_Init+0x94>)
 800068e:	f001 ff44 	bl	800251a <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f8ab 	bl	80007f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_TIM2_Init+0x94>)
 80006aa:	f002 f975 	bl	8002998 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f89d 	bl	80007f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000278 	.word	0x20000278

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f002 f9dc 	bl	8002ab8 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f874 	bl	80007f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200002c0 	.word	0x200002c0
 8000714:	40011000 	.word	0x40011000

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_USART3_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 8000724:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_USART3_UART_Init+0x4c>)
 8000750:	f002 f9b2 	bl	8002ab8 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f84a 	bl	80007f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000308 	.word	0x20000308
 8000768:	40004800 	.word	0x40004800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_GPIO_Init+0x68>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0x68>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_GPIO_Init+0x68>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <MX_GPIO_Init+0x68>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_GPIO_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <MX_GPIO_Init+0x68>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	807b      	strh	r3, [r7, #2]
	Modbus_Receive_Callback(huart);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f943 	bl	8000a70 <Modbus_Receive_Callback>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f6:	b672      	cpsid	i
}
 80007f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fa:	bf00      	nop
 80007fc:	e7fd      	b.n	80007fa <Error_Handler+0x8>
	...

08000800 <Modbus_Init>:
uint8_t * buffer_flag;

uint16_t no_regs;
uint16_t * Register;

void Modbus_Init (enum Modbus_Role role, uint8_t address, uint32_t no_modbus_ports, uint32_t no_modbus_regs) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60ba      	str	r2, [r7, #8]
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4603      	mov	r3, r0
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	460b      	mov	r3, r1
 8000810:	73bb      	strb	r3, [r7, #14]
	ModbusRole = role;
 8000812:	4a34      	ldr	r2, [pc, #208]	@ (80008e4 <Modbus_Init+0xe4>)
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	7013      	strb	r3, [r2, #0]
	Modbus_Address = address;
 8000818:	4a33      	ldr	r2, [pc, #204]	@ (80008e8 <Modbus_Init+0xe8>)
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	7013      	strb	r3, [r2, #0]

	Port = malloc (no_modbus_ports * sizeof(UART_HandleTypeDef *));
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f9d4 	bl	8003bd0 <malloc>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <Modbus_Init+0xec>)
 800082e:	601a      	str	r2, [r3, #0]

	buffer = (uint8_t **)malloc (no_modbus_ports * sizeof(uint8_t *));
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4618      	mov	r0, r3
 8000836:	f003 f9cb 	bl	8003bd0 <malloc>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <Modbus_Init+0xf0>)
 8000840:	601a      	str	r2, [r3, #0]
	buffer_len = malloc (no_modbus_ports * sizeof(uint32_t));
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f9c2 	bl	8003bd0 <malloc>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <Modbus_Init+0xf4>)
 8000852:	601a      	str	r2, [r3, #0]
	buffer_flag = malloc (no_modbus_ports * sizeof(uint8_t));
 8000854:	68b8      	ldr	r0, [r7, #8]
 8000856:	f003 f9bb 	bl	8003bd0 <malloc>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <Modbus_Init+0xf8>)
 8000860:	601a      	str	r2, [r3, #0]

	Register = malloc (no_modbus_regs * sizeof(uint16_t));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f9b2 	bl	8003bd0 <malloc>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <Modbus_Init+0xfc>)
 8000872:	601a      	str	r2, [r3, #0]

	for (int idx = 0; idx < no_modbus_ports; idx++){
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00f      	b.n	800089a <Modbus_Init+0x9a>
		buffer_flag[idx] = 0;
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <Modbus_Init+0xf8>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4413      	add	r3, r2
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
		Port[idx] = NULL;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <Modbus_Init+0xec>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	for (int idx = 0; idx < no_modbus_ports; idx++){
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d8eb      	bhi.n	800087a <Modbus_Init+0x7a>
	}

	for (int idx = 0; idx < no_modbus_regs; idx++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	e00c      	b.n	80008c2 <Modbus_Init+0xc2>
		Register[idx] = idx + 1;
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <Modbus_Init+0xfc>)
 80008ae:	6819      	ldr	r1, [r3, #0]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	440b      	add	r3, r1
 80008b6:	3201      	adds	r2, #1
 80008b8:	b292      	uxth	r2, r2
 80008ba:	801a      	strh	r2, [r3, #0]
	for (int idx = 0; idx < no_modbus_regs; idx++) {
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	3301      	adds	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d8ee      	bhi.n	80008a8 <Modbus_Init+0xa8>
	}

	no_ports = no_modbus_ports;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <Modbus_Init+0x100>)
 80008d0:	701a      	strb	r2, [r3, #0]
	no_regs = no_modbus_regs;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <Modbus_Init+0x104>)
 80008d8:	801a      	strh	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000360 	.word	0x20000360
 80008e8:	20000358 	.word	0x20000358
 80008ec:	2000035c 	.word	0x2000035c
 80008f0:	20000364 	.word	0x20000364
 80008f4:	20000368 	.word	0x20000368
 80008f8:	2000036c 	.word	0x2000036c
 80008fc:	20000374 	.word	0x20000374
 8000900:	20000359 	.word	0x20000359
 8000904:	20000370 	.word	0x20000370

08000908 <Modbus_Transmit>:

enum Modbus_Status Modbus_Transmit (UART_HandleTypeDef * Modbus_Uart, uint8_t address, uint8_t opcode, uint8_t *data, uint32_t size) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	72fb      	strb	r3, [r7, #11]
 8000916:	4613      	mov	r3, r2
 8000918:	72bb      	strb	r3, [r7, #10]
	uint8_t * sendData = malloc((4 + size) * sizeof(uint8_t));
 800091a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f003 f956 	bl	8003bd0 <malloc>
 8000924:	4603      	mov	r3, r0
 8000926:	61bb      	str	r3, [r7, #24]

	//Assign data to dataframe
	sendData[0] = address;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	7afa      	ldrb	r2, [r7, #11]
 800092c:	701a      	strb	r2, [r3, #0]
	sendData[1] = opcode;
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	7aba      	ldrb	r2, [r7, #10]
 8000934:	701a      	strb	r2, [r3, #0]
	for (int idx = 0; idx < size; idx++) {
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e00b      	b.n	8000954 <Modbus_Transmit+0x4c>
		sendData[idx + 2] = data[idx];
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	441a      	add	r2, r3
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3302      	adds	r3, #2
 8000946:	69b9      	ldr	r1, [r7, #24]
 8000948:	440b      	add	r3, r1
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	701a      	strb	r2, [r3, #0]
	for (int idx = 0; idx < size; idx++) {
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000958:	429a      	cmp	r2, r3
 800095a:	d8ef      	bhi.n	800093c <Modbus_Transmit+0x34>
	}

	//CRC Generate
	uint16_t crcVal = crc16(sendData, size + 2);
 800095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095e:	b29b      	uxth	r3, r3
 8000960:	3302      	adds	r3, #2
 8000962:	b29b      	uxth	r3, r3
 8000964:	4619      	mov	r1, r3
 8000966:	69b8      	ldr	r0, [r7, #24]
 8000968:	f7ff fda6 	bl	80004b8 <crc16>
 800096c:	4603      	mov	r3, r0
 800096e:	82fb      	strh	r3, [r7, #22]
	sendData[size + 2] = crcVal & 0xFF;//Low CRC bits
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	3302      	adds	r3, #2
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4413      	add	r3, r2
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	701a      	strb	r2, [r3, #0]
	sendData[size + 3] = (crcVal >> 8) & 0xFF;//High CRC bits
 800097e:	8afb      	ldrh	r3, [r7, #22]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	b299      	uxth	r1, r3
 8000984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000986:	3303      	adds	r3, #3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4413      	add	r3, r2
 800098c:	b2ca      	uxtb	r2, r1
 800098e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(Modbus_Uart, sendData, size + 4, 1000);
 8000990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000992:	b29b      	uxth	r3, r3
 8000994:	3304      	adds	r3, #4
 8000996:	b29a      	uxth	r2, r3
 8000998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099c:	69b9      	ldr	r1, [r7, #24]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f002 f8da 	bl	8002b58 <HAL_UART_Transmit>

	free (sendData);
 80009a4:	69b8      	ldr	r0, [r7, #24]
 80009a6:	f003 f91b 	bl	8003be0 <free>
	return MODBUS_NORMAL;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Modbus_Receive>:

enum Modbus_Status Modbus_Receive (UART_HandleTypeDef * Modbus_Uart, uint8_t * buff, uint32_t size) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
	if (HAL_UARTEx_ReceiveToIdle_IT(Modbus_Uart, buff, size) == HAL_OK) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	68b9      	ldr	r1, [r7, #8]
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f002 f950 	bl	8002c6e <HAL_UARTEx_ReceiveToIdle_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d13c      	bne.n	8000a4e <Modbus_Receive+0x9a>
		if (Modbus_Uart->Instance == USART1) {
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <Modbus_Receive+0xa4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10c      	bne.n	80009f8 <Modbus_Receive+0x44>
			buffer[0] = buff;
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <Modbus_Receive+0xa8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	601a      	str	r2, [r3, #0]
			buffer_len[0] = size;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <Modbus_Receive+0xac>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
			Port[0] = Modbus_Uart;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <Modbus_Receive+0xb0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e028      	b.n	8000a4a <Modbus_Receive+0x96>
		}
		else if (Modbus_Uart->Instance == USART2) {
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a68 <Modbus_Receive+0xb4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10f      	bne.n	8000a22 <Modbus_Receive+0x6e>
			buffer[1] = buff;
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <Modbus_Receive+0xa8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3304      	adds	r3, #4
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	601a      	str	r2, [r3, #0]
			buffer_len[1] = size;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <Modbus_Receive+0xac>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3304      	adds	r3, #4
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
			Port[1] = Modbus_Uart;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <Modbus_Receive+0xb0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e013      	b.n	8000a4a <Modbus_Receive+0x96>
		}
		else if (Modbus_Uart->Instance == USART3) {
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a11      	ldr	r2, [pc, #68]	@ (8000a6c <Modbus_Receive+0xb8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d10e      	bne.n	8000a4a <Modbus_Receive+0x96>
			buffer[2] = buff;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <Modbus_Receive+0xa8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3308      	adds	r3, #8
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	601a      	str	r2, [r3, #0]
			buffer_len[2] = size;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <Modbus_Receive+0xac>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
			Port[2] = Modbus_Uart;
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <Modbus_Receive+0xb0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3308      	adds	r3, #8
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	601a      	str	r2, [r3, #0]
		}
		return MODBUS_NORMAL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <Modbus_Receive+0x9c>
	}
	return MODBUS_ERROR;
 8000a4e:	2302      	movs	r3, #2
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	20000364 	.word	0x20000364
 8000a60:	20000368 	.word	0x20000368
 8000a64:	2000035c 	.word	0x2000035c
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40004800 	.word	0x40004800

08000a70 <Modbus_Receive_Callback>:

enum Modbus_Status Modbus_Receive_Callback (UART_HandleTypeDef * Modbus_Uart) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint8_t * checkBuffer;
	uint32_t bufferLen;
	uint8_t * flag;

	if (Modbus_Uart->Instance == USART1) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a36      	ldr	r2, [pc, #216]	@ (8000b58 <Modbus_Receive_Callback+0xe8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d10f      	bne.n	8000aa2 <Modbus_Receive_Callback+0x32>
//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
		checkBuffer = buffer[0];
 8000a82:	4b36      	ldr	r3, [pc, #216]	@ (8000b5c <Modbus_Receive_Callback+0xec>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	617b      	str	r3, [r7, #20]
		bufferLen = buffer_len[0];
 8000a8a:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <Modbus_Receive_Callback+0xf0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	613b      	str	r3, [r7, #16]
		flag = &buffer_flag[0];
 8000a92:	4b34      	ldr	r3, [pc, #208]	@ (8000b64 <Modbus_Receive_Callback+0xf4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	60fb      	str	r3, [r7, #12]
		Port[0] = Modbus_Uart;
 8000a98:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <Modbus_Receive_Callback+0xf8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e02c      	b.n	8000afc <Modbus_Receive_Callback+0x8c>
	}
	else if (Modbus_Uart->Instance == USART2) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a31      	ldr	r2, [pc, #196]	@ (8000b6c <Modbus_Receive_Callback+0xfc>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d111      	bne.n	8000ad0 <Modbus_Receive_Callback+0x60>
		checkBuffer = buffer[1];
 8000aac:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <Modbus_Receive_Callback+0xec>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	617b      	str	r3, [r7, #20]
		bufferLen = buffer_len[1];
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <Modbus_Receive_Callback+0xf0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	613b      	str	r3, [r7, #16]
		flag = &buffer_flag[1];
 8000abc:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <Modbus_Receive_Callback+0xf4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
		Port[1] = Modbus_Uart;
 8000ac4:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <Modbus_Receive_Callback+0xf8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	e015      	b.n	8000afc <Modbus_Receive_Callback+0x8c>
	}
	else if (Modbus_Uart->Instance == USART3) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a26      	ldr	r2, [pc, #152]	@ (8000b70 <Modbus_Receive_Callback+0x100>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d110      	bne.n	8000afc <Modbus_Receive_Callback+0x8c>
		checkBuffer = buffer[2];
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <Modbus_Receive_Callback+0xec>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	617b      	str	r3, [r7, #20]
		bufferLen = buffer_len[2];
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <Modbus_Receive_Callback+0xf0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
		flag = &buffer_flag[2];
 8000aea:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <Modbus_Receive_Callback+0xf4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3302      	adds	r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
		Port[2] = Modbus_Uart;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <Modbus_Receive_Callback+0xf8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3308      	adds	r3, #8
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	601a      	str	r2, [r3, #0]
	}
	uint16_t crc = crc16(checkBuffer, bufferLen - 2);
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	3b02      	subs	r3, #2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff fcd6 	bl	80004b8 <crc16>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	817b      	strh	r3, [r7, #10]
	if ((checkBuffer[bufferLen - 1] != (crc & 0xFF))
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	897b      	ldrh	r3, [r7, #10]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d10a      	bne.n	8000b3a <Modbus_Receive_Callback+0xca>
	 || (checkBuffer[bufferLen - 2] != (crc >> 8))){
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	3b02      	subs	r3, #2
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	897b      	ldrh	r3, [r7, #10]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d006      	beq.n	8000b48 <Modbus_Receive_Callback+0xd8>
		Modbus_Receive(Modbus_Uart, checkBuffer, bufferLen);
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	6979      	ldr	r1, [r7, #20]
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff38 	bl	80009b4 <Modbus_Receive>
		return MODBUS_ERROR;
 8000b44:	2302      	movs	r3, #2
 8000b46:	e003      	b.n	8000b50 <Modbus_Receive_Callback+0xe0>
	}

	*flag = 1;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
	return MODBUS_NORMAL;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	20000364 	.word	0x20000364
 8000b60:	20000368 	.word	0x20000368
 8000b64:	2000036c 	.word	0x2000036c
 8000b68:	2000035c 	.word	0x2000035c
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40004800 	.word	0x40004800

08000b74 <Modbus_Process>:

void Modbus_Process() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
	for (int idx = 0; idx < no_ports; idx++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e0e4      	b.n	8000d4a <Modbus_Process+0x1d6>
		if (buffer_flag[idx]) {
 8000b80:	4b78      	ldr	r3, [pc, #480]	@ (8000d64 <Modbus_Process+0x1f0>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 80da 	beq.w	8000d44 <Modbus_Process+0x1d0>
			if (validateAddress(idx)) {
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f97b 	bl	8000e90 <validateAddress>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 80b6 	beq.w	8000d0e <Modbus_Process+0x19a>
				switch (buffer[idx][1]) {
 8000ba2:	4b71      	ldr	r3, [pc, #452]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d002      	beq.n	8000bbc <Modbus_Process+0x48>
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d075      	beq.n	8000ca6 <Modbus_Process+0x132>
					uint16_t reg = ((buffer[idx][2] << 8) | buffer[idx][3]);
					uint16_t data = ((buffer[idx][4] << 8) | buffer[idx][5]);
					writeRegister(reg, data);
					break;
				default:
					break;
 8000bba:	e0a8      	b.n	8000d0e <Modbus_Process+0x19a>
					uint16_t start_reg = (buffer[idx][2] << 8) | buffer[idx][3];
 8000bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b65      	ldr	r3, [pc, #404]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	440b      	add	r3, r1
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3303      	adds	r3, #3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	80fb      	strh	r3, [r7, #6]
					uint8_t no_regs = (buffer[idx][4] << 8) | buffer[idx][5];
 8000be8:	4b5f      	ldr	r3, [pc, #380]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b25a      	sxtb	r2, r3
 8000bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	440b      	add	r3, r1
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	717b      	strb	r3, [r7, #5]
					uint8_t attemp = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	74fb      	strb	r3, [r7, #19]
					if (ModbusRole == MODBUS_MASTER) {
 8000c18:	4b54      	ldr	r3, [pc, #336]	@ (8000d6c <Modbus_Process+0x1f8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d13a      	bne.n	8000c96 <Modbus_Process+0x122>
						uint32_t start_tick = HAL_GetTick();
 8000c20:	f000 fb58 	bl	80012d4 <HAL_GetTick>
 8000c24:	60f8      	str	r0, [r7, #12]
						Modbus_Receive(Port[idx], buffer[idx], buffer_len[idx]);
 8000c26:	4b52      	ldr	r3, [pc, #328]	@ (8000d70 <Modbus_Process+0x1fc>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	4b4d      	ldr	r3, [pc, #308]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d74 <Modbus_Process+0x200>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f7ff feb2 	bl	80009b4 <Modbus_Receive>
						while (!(buffer_flag[idx] && validateAddress(idx)) && attemp < 3) {
 8000c50:	e00e      	b.n	8000c70 <Modbus_Process+0xfc>
							if (HAL_GetTick() - start_tick > 3000) {
 8000c52:	f000 fb3f 	bl	80012d4 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d905      	bls.n	8000c70 <Modbus_Process+0xfc>
								start_tick = HAL_GetTick();
 8000c64:	f000 fb36 	bl	80012d4 <HAL_GetTick>
 8000c68:	60f8      	str	r0, [r7, #12]
								attemp++;
 8000c6a:	7cfb      	ldrb	r3, [r7, #19]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	74fb      	strb	r3, [r7, #19]
						while (!(buffer_flag[idx] && validateAddress(idx)) && attemp < 3) {
 8000c70:	4b3c      	ldr	r3, [pc, #240]	@ (8000d64 <Modbus_Process+0x1f0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <Modbus_Process+0x11a>
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f904 	bl	8000e90 <validateAddress>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13e      	bne.n	8000d0c <Modbus_Process+0x198>
 8000c8e:	7cfb      	ldrb	r3, [r7, #19]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d9de      	bls.n	8000c52 <Modbus_Process+0xde>
					break;
 8000c94:	e03a      	b.n	8000d0c <Modbus_Process+0x198>
						readRegister(idx, start_reg, no_regs);
 8000c96:	797b      	ldrb	r3, [r7, #5]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f000 f86c 	bl	8000d7c <readRegister>
					break;
 8000ca4:	e032      	b.n	8000d0c <Modbus_Process+0x198>
					uint16_t reg = ((buffer[idx][2] << 8) | buffer[idx][3]);
 8000ca6:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	817b      	strh	r3, [r7, #10]
					uint16_t data = ((buffer[idx][4] << 8) | buffer[idx][5]);
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3304      	adds	r3, #4
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3305      	adds	r3, #5
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	813b      	strh	r3, [r7, #8]
					writeRegister(reg, data);
 8000cfe:	893a      	ldrh	r2, [r7, #8]
 8000d00:	897b      	ldrh	r3, [r7, #10]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f8a3 	bl	8000e50 <writeRegister>
					break;
 8000d0a:	e000      	b.n	8000d0e <Modbus_Process+0x19a>
					break;
 8000d0c:	bf00      	nop
				}
			}
			buffer_flag[idx] = 0;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <Modbus_Process+0x1f0>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
			Modbus_Receive(Port[idx], buffer[idx], buffer_len[idx]);
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <Modbus_Process+0x1fc>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <Modbus_Process+0x1f4>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <Modbus_Process+0x200>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	f7ff fe38 	bl	80009b4 <Modbus_Receive>
	for (int idx = 0; idx < no_ports; idx++) {
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Modbus_Process+0x204>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	4293      	cmp	r3, r2
 8000d54:	f6ff af14 	blt.w	8000b80 <Modbus_Process+0xc>
		}
	}
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000036c 	.word	0x2000036c
 8000d68:	20000364 	.word	0x20000364
 8000d6c:	20000360 	.word	0x20000360
 8000d70:	2000035c 	.word	0x2000035c
 8000d74:	20000368 	.word	0x20000368
 8000d78:	20000359 	.word	0x20000359

08000d7c <readRegister>:

void readRegister (int Modbus_Port, uint16_t start_reg, uint16_t no_regs) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	803b      	strh	r3, [r7, #0]
	uint8_t * frame = malloc (1 + no_regs * 2 * sizeof(uint8_t));
 8000d8c:	883b      	ldrh	r3, [r7, #0]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	3301      	adds	r3, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 ff1c 	bl	8003bd0 <malloc>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60fb      	str	r3, [r7, #12]
	frame[0] = no_regs * 2;
 8000d9c:	883b      	ldrh	r3, [r7, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	701a      	strb	r2, [r3, #0]

	for (int idx = start_reg, frameIdx = 1; idx < start_reg + no_regs; idx++, frameIdx += 2) {
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	e01e      	b.n	8000df0 <readRegister+0x74>
		frame[frameIdx] = Register[idx] >> 8;
 8000db2:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <readRegister+0xc8>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	b299      	uxth	r1, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
		frame[frameIdx + 1] = Register[idx] & 0xFF;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <readRegister+0xc8>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	8819      	ldrh	r1, [r3, #0]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	b2ca      	uxtb	r2, r1
 8000de2:	701a      	strb	r2, [r3, #0]
	for (int idx = start_reg, frameIdx = 1; idx < start_reg + no_regs; idx++, frameIdx += 2) {
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	3302      	adds	r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	887a      	ldrh	r2, [r7, #2]
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbda      	blt.n	8000db2 <readRegister+0x36>
	}
	Modbus_Transmit(Port[Modbus_Port], buffer[Modbus_Port][0], buffer[Modbus_Port][1], frame, 1 + no_regs * 2);
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <readRegister+0xcc>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <readRegister+0xd0>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	7819      	ldrb	r1, [r3, #0]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <readRegister+0xd0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	781a      	ldrb	r2, [r3, #0]
 8000e26:	883b      	ldrh	r3, [r7, #0]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f7ff fd6a 	bl	8000908 <Modbus_Transmit>
	free (frame);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f002 fed3 	bl	8003be0 <free>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000374 	.word	0x20000374
 8000e48:	2000035c 	.word	0x2000035c
 8000e4c:	20000364 	.word	0x20000364

08000e50 <writeRegister>:

void writeRegister (uint16_t reg, uint16_t data) {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	80fb      	strh	r3, [r7, #6]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	80bb      	strh	r3, [r7, #4]
	if (reg < 0 || reg >= no_regs)		return;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <writeRegister+0x38>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d207      	bcs.n	8000e7a <writeRegister+0x2a>
	Register[reg] = data;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <writeRegister+0x3c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	88ba      	ldrh	r2, [r7, #4]
 8000e76:	801a      	strh	r2, [r3, #0]
 8000e78:	e000      	b.n	8000e7c <writeRegister+0x2c>
	if (reg < 0 || reg >= no_regs)		return;
 8000e7a:	bf00      	nop
}
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000370 	.word	0x20000370
 8000e8c:	20000374 	.word	0x20000374

08000e90 <validateAddress>:

uint8_t validateAddress (uint8_t buffer_idx) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if (buffer[buffer_idx][0] != Modbus_Address)
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <validateAddress+0x34>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <validateAddress+0x38>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d001      	beq.n	8000eb4 <validateAddress+0x24>
		return 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e000      	b.n	8000eb6 <validateAddress+0x26>
	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000364 	.word	0x20000364
 8000ec8:	20000358 	.word	0x20000358

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f2c:	d115      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201c      	movs	r0, #28
 8000f50:	f000 faa7 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f54:	201c      	movs	r0, #28
 8000f56:	f000 fac0 	bl	80014da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	@ 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a3b      	ldr	r2, [pc, #236]	@ (8001074 <HAL_UART_MspInit+0x10c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d135      	bne.n	8000ff6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	4a39      	ldr	r2, [pc, #228]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9a:	4b37      	ldr	r3, [pc, #220]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a32      	ldr	r2, [pc, #200]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4827      	ldr	r0, [pc, #156]	@ (800107c <HAL_UART_MspInit+0x114>)
 8000fe0:	f000 fb28 	bl	8001634 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2025      	movs	r0, #37	@ 0x25
 8000fea:	f000 fa5a 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fee:	2025      	movs	r0, #37	@ 0x25
 8000ff0:	f000 fa73 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff4:	e039      	b.n	800106a <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a21      	ldr	r2, [pc, #132]	@ (8001080 <HAL_UART_MspInit+0x118>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d134      	bne.n	800106a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_UART_MspInit+0x110>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_UART_MspInit+0x110>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6313      	str	r3, [r2, #48]	@ 0x30
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_UART_MspInit+0x110>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001038:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104a:	2307      	movs	r3, #7
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	480b      	ldr	r0, [pc, #44]	@ (8001084 <HAL_UART_MspInit+0x11c>)
 8001056:	f000 faed 	bl	8001634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2027      	movs	r0, #39	@ 0x27
 8001060:	f000 fa1f 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001064:	2027      	movs	r0, #39	@ 0x27
 8001066:	f000 fa38 	bl	80014da <HAL_NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3730      	adds	r7, #48	@ 0x30
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40011000 	.word	0x40011000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	40004800 	.word	0x40004800
 8001084:	40020800 	.word	0x40020800

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MemManage_Handler+0x4>

080010a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <UsageFault_Handler+0x4>

080010b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010de:	f000 f8e5 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM2_IRQHandler+0x10>)
 80010ee:	f001 f924 	bl	800233a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000278 	.word	0x20000278

080010fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <USART1_IRQHandler+0x10>)
 8001102:	f001 fe11 	bl	8002d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002c0 	.word	0x200002c0

08001110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <USART3_IRQHandler+0x10>)
 8001116:	f001 fe07 	bl	8002d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000308 	.word	0x20000308

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f002 fe12 	bl	8003d7c <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20020000 	.word	0x20020000
 8001184:	00000400 	.word	0x00000400
 8001188:	20000378 	.word	0x20000378
 800118c:	200004c8 	.word	0x200004c8

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f002 fdd1 	bl	8003d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff f997 	bl	8000518 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80011f8:	08003ea8 	.word	0x08003ea8
  ldr r2, =_sbss
 80011fc:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001200:	200004c8 	.word	0x200004c8

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f92b 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fe46 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f943 	bl	80014f6 <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f90b 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000200 	.word	0x20000200
 80012a4:	20000208 	.word	0x20000208
 80012a8:	20000204 	.word	0x20000204

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000208 	.word	0x20000208
 80012d0:	2000037c 	.word	0x2000037c

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000037c 	.word	0x2000037c

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	@ (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	@ (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	@ (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	@ 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	@ 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff29 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff3e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff31 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff feda 	bl	80012d4 <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d008      	beq.n	8001540 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2280      	movs	r2, #128	@ 0x80
 8001532:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e052      	b.n	80015e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0216 	bic.w	r2, r2, #22
 800154e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800155e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <HAL_DMA_Abort+0x62>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0208 	bic.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001590:	e013      	b.n	80015ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001592:	f7ff fe9f 	bl	80012d4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b05      	cmp	r3, #5
 800159e:	d90c      	bls.n	80015ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2220      	movs	r2, #32
 80015a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e015      	b.n	80015e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e4      	bne.n	8001592 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015cc:	223f      	movs	r2, #63	@ 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d004      	beq.n	800160c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e00c      	b.n	8001626 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2205      	movs	r2, #5
 8001610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e16b      	b.n	8001928 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 815a 	bne.w	8001922 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80b4 	beq.w	8001922 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b60      	ldr	r3, [pc, #384]	@ (8001940 <HAL_GPIO_Init+0x30c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001940 <HAL_GPIO_Init+0x30c>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001940 <HAL_GPIO_Init+0x30c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001944 <HAL_GPIO_Init+0x310>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_GPIO_Init+0x314>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d02b      	beq.n	800185a <HAL_GPIO_Init+0x226>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a51      	ldr	r2, [pc, #324]	@ (800194c <HAL_GPIO_Init+0x318>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x222>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a50      	ldr	r2, [pc, #320]	@ (8001950 <HAL_GPIO_Init+0x31c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x21e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4f      	ldr	r2, [pc, #316]	@ (8001954 <HAL_GPIO_Init+0x320>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x21a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4e      	ldr	r2, [pc, #312]	@ (8001958 <HAL_GPIO_Init+0x324>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x216>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4d      	ldr	r2, [pc, #308]	@ (800195c <HAL_GPIO_Init+0x328>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x212>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4c      	ldr	r2, [pc, #304]	@ (8001960 <HAL_GPIO_Init+0x32c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x20e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4b      	ldr	r2, [pc, #300]	@ (8001964 <HAL_GPIO_Init+0x330>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x20a>
 800183a:	2307      	movs	r3, #7
 800183c:	e00e      	b.n	800185c <HAL_GPIO_Init+0x228>
 800183e:	2308      	movs	r3, #8
 8001840:	e00c      	b.n	800185c <HAL_GPIO_Init+0x228>
 8001842:	2306      	movs	r3, #6
 8001844:	e00a      	b.n	800185c <HAL_GPIO_Init+0x228>
 8001846:	2305      	movs	r3, #5
 8001848:	e008      	b.n	800185c <HAL_GPIO_Init+0x228>
 800184a:	2304      	movs	r3, #4
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x228>
 800184e:	2303      	movs	r3, #3
 8001850:	e004      	b.n	800185c <HAL_GPIO_Init+0x228>
 8001852:	2302      	movs	r3, #2
 8001854:	e002      	b.n	800185c <HAL_GPIO_Init+0x228>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x228>
 800185a:	2300      	movs	r3, #0
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f002 0203 	and.w	r2, r2, #3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4093      	lsls	r3, r2
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186c:	4935      	ldr	r1, [pc, #212]	@ (8001944 <HAL_GPIO_Init+0x310>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_GPIO_Init+0x334>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189e:	4a32      	ldr	r2, [pc, #200]	@ (8001968 <HAL_GPIO_Init+0x334>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a4:	4b30      	ldr	r3, [pc, #192]	@ (8001968 <HAL_GPIO_Init+0x334>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c8:	4a27      	ldr	r2, [pc, #156]	@ (8001968 <HAL_GPIO_Init+0x334>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ce:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <HAL_GPIO_Init+0x334>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <HAL_GPIO_Init+0x334>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_GPIO_Init+0x334>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191c:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <HAL_GPIO_Init+0x334>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3301      	adds	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	f67f ae90 	bls.w	8001650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3724      	adds	r7, #36	@ 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40013800 	.word	0x40013800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40021400 	.word	0x40021400
 8001960:	40021800 	.word	0x40021800
 8001964:	40021c00 	.word	0x40021c00
 8001968:	40013c00 	.word	0x40013c00

0800196c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e267      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d075      	beq.n	8001a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800198a:	4b88      	ldr	r3, [pc, #544]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d00c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b85      	ldr	r3, [pc, #532]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b82      	ldr	r3, [pc, #520]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d05b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d157      	bne.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e242      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x74>
 80019d2:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b70      	ldr	r3, [pc, #448]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6f      	ldr	r2, [pc, #444]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b6d      	ldr	r3, [pc, #436]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6c      	ldr	r2, [pc, #432]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 8001a04:	4b69      	ldr	r3, [pc, #420]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a68      	ldr	r2, [pc, #416]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b66      	ldr	r3, [pc, #408]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a65      	ldr	r2, [pc, #404]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc56 	bl	80012d4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc52 	bl	80012d4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e207      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc42 	bl	80012d4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fc3e 	bl	80012d4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1f3      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a82:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b44      	ldr	r3, [pc, #272]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1c7      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4937      	ldr	r1, [pc, #220]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_RCC_OscConfig+0x244>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fbf7 	bl	80012d4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fbf3 	bl	80012d4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1a8      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4925      	ldr	r1, [pc, #148]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x244>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fbd6 	bl	80012d4 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fbd2 	bl	80012d4 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e187      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d036      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_RCC_OscConfig+0x248>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fbb6 	bl	80012d4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fbb2 	bl	80012d4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e167      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x200>
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x248>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb9f 	bl	80012d4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e00e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fb9b 	bl	80012d4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d907      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e150      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	42470000 	.word	0x42470000
 8001bb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b88      	ldr	r3, [pc, #544]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ea      	bne.n	8001b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8097 	beq.w	8001d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b81      	ldr	r3, [pc, #516]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b7d      	ldr	r3, [pc, #500]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a7c      	ldr	r2, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b77      	ldr	r3, [pc, #476]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b74      	ldr	r3, [pc, #464]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a73      	ldr	r2, [pc, #460]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fb5b 	bl	80012d4 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff fb57 	bl	80012d4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e10c      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b6a      	ldr	r3, [pc, #424]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2ea>
 8001c48:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4c:	4a63      	ldr	r2, [pc, #396]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x324>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x30c>
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	4a5e      	ldr	r2, [pc, #376]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0x324>
 8001c78:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a57      	ldr	r2, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	4b55      	ldr	r3, [pc, #340]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a54      	ldr	r2, [pc, #336]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff fb1c 	bl	80012d4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fb18 	bl	80012d4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0cb      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb6:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ee      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x334>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fb06 	bl	80012d4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fb02 	bl	80012d4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0b5      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ee      	bne.n	8001ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	4a38      	ldr	r2, [pc, #224]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a1 	beq.w	8001e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0a:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d05c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d141      	bne.n	8001da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fad6 	bl	80012d4 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fad2 	bl	80012d4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e087      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	491b      	ldr	r1, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff faab 	bl	80012d4 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff faa7 	bl	80012d4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e05c      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x416>
 8001da0:	e054      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fa94 	bl	80012d4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff fa90 	bl	80012d4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e045      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x444>
 8001dce:	e03d      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e038      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d028      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d121      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11a      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0cc      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d90c      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b63      	ldr	r3, [pc, #396]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0b8      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec8:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	494d      	ldr	r1, [pc, #308]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d044      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d119      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e067      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b37      	ldr	r3, [pc, #220]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4934      	ldr	r1, [pc, #208]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff f9c2 	bl	80012d4 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff f9be 	bl	80012d4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e04f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d20c      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e032      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4916      	ldr	r1, [pc, #88]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fce:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	490e      	ldr	r1, [pc, #56]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe2:	f000 f821 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	490a      	ldr	r1, [pc, #40]	@ (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f922 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00
 8002018:	40023800 	.word	0x40023800
 800201c:	08003e80 	.word	0x08003e80
 8002020:	20000200 	.word	0x20000200
 8002024:	20000204 	.word	0x20000204

08002028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800202c:	b094      	sub	sp, #80	@ 0x50
 800202e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002040:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d00d      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x40>
 800204c:	2b08      	cmp	r3, #8
 800204e:	f200 80e1 	bhi.w	8002214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x34>
 8002056:	2b04      	cmp	r3, #4
 8002058:	d003      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x3a>
 800205a:	e0db      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b73      	ldr	r3, [pc, #460]	@ (800222c <HAL_RCC_GetSysClockFreq+0x204>)
 800205e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002060:	e0db      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002062:	4b73      	ldr	r3, [pc, #460]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x208>)
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002066:	e0d8      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002068:	4b6f      	ldr	r3, [pc, #444]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002070:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002072:	4b6d      	ldr	r3, [pc, #436]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d063      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b6a      	ldr	r3, [pc, #424]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	2200      	movs	r2, #0
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002088:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002090:	633b      	str	r3, [r7, #48]	@ 0x30
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
 8002096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800209a:	4622      	mov	r2, r4
 800209c:	462b      	mov	r3, r5
 800209e:	f04f 0000 	mov.w	r0, #0
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	0159      	lsls	r1, r3, #5
 80020a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ac:	0150      	lsls	r0, r2, #5
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4621      	mov	r1, r4
 80020b4:	1a51      	subs	r1, r2, r1
 80020b6:	6139      	str	r1, [r7, #16]
 80020b8:	4629      	mov	r1, r5
 80020ba:	eb63 0301 	sbc.w	r3, r3, r1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020cc:	4659      	mov	r1, fp
 80020ce:	018b      	lsls	r3, r1, #6
 80020d0:	4651      	mov	r1, sl
 80020d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d6:	4651      	mov	r1, sl
 80020d8:	018a      	lsls	r2, r1, #6
 80020da:	4651      	mov	r1, sl
 80020dc:	ebb2 0801 	subs.w	r8, r2, r1
 80020e0:	4659      	mov	r1, fp
 80020e2:	eb63 0901 	sbc.w	r9, r3, r1
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020fa:	4690      	mov	r8, r2
 80020fc:	4699      	mov	r9, r3
 80020fe:	4623      	mov	r3, r4
 8002100:	eb18 0303 	adds.w	r3, r8, r3
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	462b      	mov	r3, r5
 8002108:	eb49 0303 	adc.w	r3, r9, r3
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800211a:	4629      	mov	r1, r5
 800211c:	024b      	lsls	r3, r1, #9
 800211e:	4621      	mov	r1, r4
 8002120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002124:	4621      	mov	r1, r4
 8002126:	024a      	lsls	r2, r1, #9
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800212e:	2200      	movs	r2, #0
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002138:	f7fe f846 	bl	80001c8 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002144:	e058      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	2200      	movs	r2, #0
 800214e:	4618      	mov	r0, r3
 8002150:	4611      	mov	r1, r2
 8002152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
 800215c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	0159      	lsls	r1, r3, #5
 800216e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002172:	0150      	lsls	r0, r2, #5
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4641      	mov	r1, r8
 800217a:	ebb2 0a01 	subs.w	sl, r2, r1
 800217e:	4649      	mov	r1, r9
 8002180:	eb63 0b01 	sbc.w	fp, r3, r1
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002198:	ebb2 040a 	subs.w	r4, r2, sl
 800219c:	eb63 050b 	sbc.w	r5, r3, fp
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	00eb      	lsls	r3, r5, #3
 80021aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ae:	00e2      	lsls	r2, r4, #3
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	4643      	mov	r3, r8
 80021b6:	18e3      	adds	r3, r4, r3
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	464b      	mov	r3, r9
 80021bc:	eb45 0303 	adc.w	r3, r5, r3
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ce:	4629      	mov	r1, r5
 80021d0:	028b      	lsls	r3, r1, #10
 80021d2:	4621      	mov	r1, r4
 80021d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d8:	4621      	mov	r1, r4
 80021da:	028a      	lsls	r2, r1, #10
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e2:	2200      	movs	r2, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	61fa      	str	r2, [r7, #28]
 80021e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ec:	f7fd ffec 	bl	80001c8 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4613      	mov	r3, r2
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800220a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002212:	e002      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_RCC_GetSysClockFreq+0x204>)
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800221c:	4618      	mov	r0, r3
 800221e:	3750      	adds	r7, #80	@ 0x50
 8002220:	46bd      	mov	sp, r7
 8002222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	00f42400 	.word	0x00f42400
 8002230:	007a1200 	.word	0x007a1200

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_RCC_GetHCLKFreq+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000200 	.word	0x20000200

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff0 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0a9b      	lsrs	r3, r3, #10
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	@ (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	08003e90 	.word	0x08003e90

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002278:	f7ff ffdc 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0b5b      	lsrs	r3, r3, #13
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	@ (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	08003e90 	.word	0x08003e90

0800229c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e041      	b.n	8002332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fe2a 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fa16 	bl	800270c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01b      	beq.n	800239e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0202 	mvn.w	r2, #2
 800236e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f9a3 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 800238a:	e005      	b.n	8002398 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f995 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9a6 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01b      	beq.n	80023ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f06f 0204 	mvn.w	r2, #4
 80023ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f97d 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 80023d6:	e005      	b.n	80023e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f96f 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f980 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01b      	beq.n	8002436 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0208 	mvn.w	r2, #8
 8002406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2204      	movs	r2, #4
 800240c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f957 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 8002422:	e005      	b.n	8002430 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f949 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f95a 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01b      	beq.n	8002482 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f06f 0210 	mvn.w	r2, #16
 8002452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2208      	movs	r2, #8
 8002458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f931 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 800246e:	e005      	b.n	800247c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f923 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f934 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0201 	mvn.w	r2, #1
 800249e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f901 	bl	80026a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00c      	beq.n	80024ca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 faed 	bl	8002aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f905 	bl	80026f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0220 	mvn.w	r2, #32
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fabf 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_TIM_ConfigClockSource+0x1c>
 8002532:	2302      	movs	r3, #2
 8002534:	e0b4      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x186>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002554:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800255c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800256e:	d03e      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0xd4>
 8002570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002574:	f200 8087 	bhi.w	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257c:	f000 8086 	beq.w	800268c <HAL_TIM_ConfigClockSource+0x172>
 8002580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002584:	d87f      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 8002586:	2b70      	cmp	r3, #112	@ 0x70
 8002588:	d01a      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0xa6>
 800258a:	2b70      	cmp	r3, #112	@ 0x70
 800258c:	d87b      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 800258e:	2b60      	cmp	r3, #96	@ 0x60
 8002590:	d050      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x11a>
 8002592:	2b60      	cmp	r3, #96	@ 0x60
 8002594:	d877      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 8002596:	2b50      	cmp	r3, #80	@ 0x50
 8002598:	d03c      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0xfa>
 800259a:	2b50      	cmp	r3, #80	@ 0x50
 800259c:	d873      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 800259e:	2b40      	cmp	r3, #64	@ 0x40
 80025a0:	d058      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0x13a>
 80025a2:	2b40      	cmp	r3, #64	@ 0x40
 80025a4:	d86f      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 80025a6:	2b30      	cmp	r3, #48	@ 0x30
 80025a8:	d064      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x15a>
 80025aa:	2b30      	cmp	r3, #48	@ 0x30
 80025ac:	d86b      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d060      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x15a>
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d867      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d05c      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x15a>
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d05a      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x15a>
 80025be:	e062      	b.n	8002686 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025d0:	f000 f9c2 	bl	8002958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]
      break;
 80025ec:	e04f      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025fe:	f000 f9ab 	bl	8002958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002610:	609a      	str	r2, [r3, #8]
      break;
 8002612:	e03c      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002620:	461a      	mov	r2, r3
 8002622:	f000 f91f 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2150      	movs	r1, #80	@ 0x50
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f978 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002632:	e02c      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002640:	461a      	mov	r2, r3
 8002642:	f000 f93e 	bl	80028c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2160      	movs	r1, #96	@ 0x60
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f968 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002652:	e01c      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002660:	461a      	mov	r2, r3
 8002662:	f000 f8ff 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2140      	movs	r1, #64	@ 0x40
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f958 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002672:	e00c      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 f94f 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002684:	e003      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      break;
 800268a:	e000      	b.n	800268e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800268c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a46      	ldr	r2, [pc, #280]	@ (8002838 <TIM_Base_SetConfig+0x12c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272a:	d00f      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a43      	ldr	r2, [pc, #268]	@ (800283c <TIM_Base_SetConfig+0x130>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00b      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a42      	ldr	r2, [pc, #264]	@ (8002840 <TIM_Base_SetConfig+0x134>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a41      	ldr	r2, [pc, #260]	@ (8002844 <TIM_Base_SetConfig+0x138>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a40      	ldr	r2, [pc, #256]	@ (8002848 <TIM_Base_SetConfig+0x13c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a35      	ldr	r2, [pc, #212]	@ (8002838 <TIM_Base_SetConfig+0x12c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800276c:	d027      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a32      	ldr	r2, [pc, #200]	@ (800283c <TIM_Base_SetConfig+0x130>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d023      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a31      	ldr	r2, [pc, #196]	@ (8002840 <TIM_Base_SetConfig+0x134>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a30      	ldr	r2, [pc, #192]	@ (8002844 <TIM_Base_SetConfig+0x138>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2f      	ldr	r2, [pc, #188]	@ (8002848 <TIM_Base_SetConfig+0x13c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d017      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2e      	ldr	r2, [pc, #184]	@ (800284c <TIM_Base_SetConfig+0x140>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2d      	ldr	r2, [pc, #180]	@ (8002850 <TIM_Base_SetConfig+0x144>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00f      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002854 <TIM_Base_SetConfig+0x148>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <TIM_Base_SetConfig+0x14c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <TIM_Base_SetConfig+0x150>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <TIM_Base_SetConfig+0x154>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d108      	bne.n	80027d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a10      	ldr	r2, [pc, #64]	@ (8002838 <TIM_Base_SetConfig+0x12c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0xf8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <TIM_Base_SetConfig+0x13c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]
  }
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40010000 	.word	0x40010000
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40010400 	.word	0x40010400
 800284c:	40014000 	.word	0x40014000
 8002850:	40014400 	.word	0x40014400
 8002854:	40014800 	.word	0x40014800
 8002858:	40001800 	.word	0x40001800
 800285c:	40001c00 	.word	0x40001c00
 8002860:	40002000 	.word	0x40002000

08002864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800288e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 030a 	bic.w	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b087      	sub	sp, #28
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 0210 	bic.w	r2, r3, #16
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	031b      	lsls	r3, r3, #12
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 0307 	orr.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	431a      	orrs	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e05a      	b.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a21      	ldr	r2, [pc, #132]	@ (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029fc:	d01d      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	@ (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a18      	ldr	r2, [pc, #96]	@ (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	@ (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	@ (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40010400 	.word	0x40010400
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40001800 	.word	0x40001800

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e042      	b.n	8002b50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fa42 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	@ 0x24
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fdf3 	bl	80036e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d175      	bne.n	8002c64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_UART_Transmit+0x2c>
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e06e      	b.n	8002c66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2221      	movs	r2, #33	@ 0x21
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b96:	f7fe fb9d 	bl	80012d4 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_UART_Transmit+0x6c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e003      	b.n	8002bcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bcc:	e02e      	b.n	8002c2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fb55 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e03a      	b.n	8002c66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e007      	b.n	8002c1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1cb      	bne.n	8002bce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2140      	movs	r1, #64	@ 0x40
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fb21 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e006      	b.n	8002c66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08c      	sub	sp, #48	@ 0x30
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d14a      	bne.n	8002d1e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e043      	b.n	8002d20 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fb45 	bl	800333a <UART_Start_Receive_IT>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d12c      	bne.n	8002d18 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d125      	bne.n	8002d12 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	617b      	str	r3, [r7, #20]
   return(result);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e5      	bne.n	8002cdc <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002d10:	e002      	b.n	8002d18 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002d18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d1c:	e000      	b.n	8002d20 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3730      	adds	r7, #48	@ 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_UART_IRQHandler+0x66>
 8002d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fbf0 	bl	800356c <UART_Receive_IT>
      return;
 8002d8c:	e25b      	b.n	8003246 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80de 	beq.w	8002f54 <HAL_UART_IRQHandler+0x22c>
 8002d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80d1 	beq.w	8002f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_UART_IRQHandler+0xae>
 8002dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_UART_IRQHandler+0xd2>
 8002de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xf6>
 8002e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f043 0204 	orr.w	r2, r3, #4
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d011      	beq.n	8002e4e <HAL_UART_IRQHandler+0x126>
 8002e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f043 0208 	orr.w	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 81f2 	beq.w	800323c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_UART_IRQHandler+0x14e>
 8002e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fb7b 	bl	800356c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x17a>
 8002e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d04f      	beq.n	8002f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa83 	bl	80033ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb2:	2b40      	cmp	r3, #64	@ 0x40
 8002eb4:	d141      	bne.n	8002f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3314      	adds	r3, #20
 8002ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1d9      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d013      	beq.n	8002f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003108 <HAL_UART_IRQHandler+0x3e0>)
 8002f10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fb69 	bl	80015ee <HAL_DMA_Abort_IT>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f30:	e00e      	b.n	8002f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f99e 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00a      	b.n	8002f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f99a 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e006      	b.n	8002f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f996 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f4e:	e175      	b.n	800323c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	bf00      	nop
    return;
 8002f52:	e173      	b.n	800323c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f040 814f 	bne.w	80031fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8148 	beq.w	80031fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8141 	beq.w	80031fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	f040 80b6 	bne.w	800310c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8145 	beq.w	8003240 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	f080 813e 	bcs.w	8003240 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd6:	f000 8088 	beq.w	80030ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800300a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800301e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1d9      	bne.n	8002fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800304a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800304e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003052:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800305c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e1      	bne.n	8003026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3314      	adds	r3, #20
 8003068:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3314      	adds	r3, #20
 8003082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800308c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e3      	bne.n	8003062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e3      	bne.n	80030a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fa12 	bl	800150e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4619      	mov	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fd fb69 	bl	80007d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003106:	e09b      	b.n	8003240 <HAL_UART_IRQHandler+0x518>
 8003108:	08003475 	.word	0x08003475
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003114:	b29b      	uxth	r3, r3
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 808e 	beq.w	8003244 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8089 	beq.w	8003244 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003148:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003156:	647a      	str	r2, [r7, #68]	@ 0x44
 8003158:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800315c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e3      	bne.n	8003132 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3314      	adds	r3, #20
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	623b      	str	r3, [r7, #32]
   return(result);
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800318e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e3      	bne.n	800316a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0310 	bic.w	r3, r3, #16
 80031c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031d4:	61fa      	str	r2, [r7, #28]
 80031d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	69b9      	ldr	r1, [r7, #24]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	617b      	str	r3, [r7, #20]
   return(result);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e3      	bne.n	80031b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd faef 	bl	80007d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031fa:	e023      	b.n	8003244 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <HAL_UART_IRQHandler+0x4f4>
 8003208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800320c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f941 	bl	800349c <UART_Transmit_IT>
    return;
 800321a:	e014      	b.n	8003246 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <HAL_UART_IRQHandler+0x51e>
 8003228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f981 	bl	800353c <UART_EndTransmit_IT>
    return;
 800323a:	e004      	b.n	8003246 <HAL_UART_IRQHandler+0x51e>
    return;
 800323c:	bf00      	nop
 800323e:	e002      	b.n	8003246 <HAL_UART_IRQHandler+0x51e>
      return;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <HAL_UART_IRQHandler+0x51e>
      return;
 8003244:	bf00      	nop
  }
}
 8003246:	37e8      	adds	r7, #232	@ 0xe8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	e03b      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d037      	beq.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe f817 	bl	80012d4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e03a      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d023      	beq.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b80      	cmp	r3, #128	@ 0x80
 80032ce:	d020      	beq.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	d01d      	beq.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d116      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f857 	bl	80033ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2208      	movs	r2, #8
 8003304:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	429a      	cmp	r2, r3
 800332e:	d0b4      	beq.n	800329a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2222      	movs	r2, #34	@ 0x22
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800337e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0220 	orr.w	r2, r2, #32
 800339e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b095      	sub	sp, #84	@ 0x54
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80033d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800340a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e5      	bne.n	80033ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	2b01      	cmp	r3, #1
 8003424:	d119      	bne.n	800345a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	60bb      	str	r3, [r7, #8]
   return(result);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f023 0310 	bic.w	r3, r3, #16
 800343c:	647b      	str	r3, [r7, #68]	@ 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003446:	61ba      	str	r2, [r7, #24]
 8003448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	613b      	str	r3, [r7, #16]
   return(result);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e5      	bne.n	8003426 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003468:	bf00      	nop
 800346a:	3754      	adds	r7, #84	@ 0x54
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff fef0 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b21      	cmp	r3, #33	@ 0x21
 80034ae:	d13e      	bne.n	800352e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b8:	d114      	bne.n	80034e4 <UART_Transmit_IT+0x48>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d110      	bne.n	80034e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	621a      	str	r2, [r3, #32]
 80034e2:	e008      	b.n	80034f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	1c59      	adds	r1, r3, #1
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6211      	str	r1, [r2, #32]
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4619      	mov	r1, r3
 8003504:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003518:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003528:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003552:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fe75 	bl	800324c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08c      	sub	sp, #48	@ 0x30
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b22      	cmp	r3, #34	@ 0x22
 800357e:	f040 80ae 	bne.w	80036de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358a:	d117      	bne.n	80035bc <UART_Receive_IT+0x50>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d113      	bne.n	80035bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80035ba:	e026      	b.n	800360a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ce:	d007      	beq.n	80035e0 <UART_Receive_IT+0x74>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <UART_Receive_IT+0x82>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e008      	b.n	8003600 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29b      	uxth	r3, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4619      	mov	r1, r3
 8003618:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800361a:	2b00      	cmp	r3, #0
 800361c:	d15d      	bne.n	80036da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0220 	bic.w	r2, r2, #32
 800362c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800363c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	2b01      	cmp	r3, #1
 8003662:	d135      	bne.n	80036d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	613b      	str	r3, [r7, #16]
   return(result);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f023 0310 	bic.w	r3, r3, #16
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368a:	623a      	str	r2, [r7, #32]
 800368c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	69f9      	ldr	r1, [r7, #28]
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	61bb      	str	r3, [r7, #24]
   return(result);
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d10a      	bne.n	80036c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd f885 	bl	80007d8 <HAL_UARTEx_RxEventCallback>
 80036ce:	e002      	b.n	80036d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fdc5 	bl	8003260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e002      	b.n	80036e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3730      	adds	r7, #48	@ 0x30
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ec:	b0c0      	sub	sp, #256	@ 0x100
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	68d9      	ldr	r1, [r3, #12]
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	ea40 0301 	orr.w	r3, r0, r1
 8003710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	431a      	orrs	r2, r3
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003740:	f021 010c 	bic.w	r1, r1, #12
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800374e:	430b      	orrs	r3, r1
 8003750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003762:	6999      	ldr	r1, [r3, #24]
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	ea40 0301 	orr.w	r3, r0, r1
 800376e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b8f      	ldr	r3, [pc, #572]	@ (80039b4 <UART_SetConfig+0x2cc>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d005      	beq.n	8003788 <UART_SetConfig+0xa0>
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b8d      	ldr	r3, [pc, #564]	@ (80039b8 <UART_SetConfig+0x2d0>)
 8003784:	429a      	cmp	r2, r3
 8003786:	d104      	bne.n	8003792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7fe fd74 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 800378c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003790:	e003      	b.n	800379a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003792:	f7fe fd5b 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003796:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a4:	f040 810c 	bne.w	80039c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037ba:	4622      	mov	r2, r4
 80037bc:	462b      	mov	r3, r5
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037c2:	415b      	adcs	r3, r3
 80037c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037ca:	4621      	mov	r1, r4
 80037cc:	eb12 0801 	adds.w	r8, r2, r1
 80037d0:	4629      	mov	r1, r5
 80037d2:	eb43 0901 	adc.w	r9, r3, r1
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	eb18 0303 	adds.w	r3, r8, r3
 80037f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037f8:	462b      	mov	r3, r5
 80037fa:	eb49 0303 	adc.w	r3, r9, r3
 80037fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800380e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003816:	460b      	mov	r3, r1
 8003818:	18db      	adds	r3, r3, r3
 800381a:	653b      	str	r3, [r7, #80]	@ 0x50
 800381c:	4613      	mov	r3, r2
 800381e:	eb42 0303 	adc.w	r3, r2, r3
 8003822:	657b      	str	r3, [r7, #84]	@ 0x54
 8003824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800382c:	f7fc fccc 	bl	80001c8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4b61      	ldr	r3, [pc, #388]	@ (80039bc <UART_SetConfig+0x2d4>)
 8003836:	fba3 2302 	umull	r2, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	011c      	lsls	r4, r3, #4
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003848:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800384c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003858:	415b      	adcs	r3, r3
 800385a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800385c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003860:	4641      	mov	r1, r8
 8003862:	eb12 0a01 	adds.w	sl, r2, r1
 8003866:	4649      	mov	r1, r9
 8003868:	eb43 0b01 	adc.w	fp, r3, r1
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800387c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003880:	4692      	mov	sl, r2
 8003882:	469b      	mov	fp, r3
 8003884:	4643      	mov	r3, r8
 8003886:	eb1a 0303 	adds.w	r3, sl, r3
 800388a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800388e:	464b      	mov	r3, r9
 8003890:	eb4b 0303 	adc.w	r3, fp, r3
 8003894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038ac:	460b      	mov	r3, r1
 80038ae:	18db      	adds	r3, r3, r3
 80038b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038b2:	4613      	mov	r3, r2
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038c2:	f7fc fc81 	bl	80001c8 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	4b3b      	ldr	r3, [pc, #236]	@ (80039bc <UART_SetConfig+0x2d4>)
 80038ce:	fba3 2301 	umull	r2, r3, r3, r1
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2264      	movs	r2, #100	@ 0x64
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038e2:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <UART_SetConfig+0x2d4>)
 80038e4:	fba3 2302 	umull	r2, r3, r3, r2
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038f0:	441c      	add	r4, r3
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800390c:	415b      	adcs	r3, r3
 800390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003914:	4641      	mov	r1, r8
 8003916:	1851      	adds	r1, r2, r1
 8003918:	6339      	str	r1, [r7, #48]	@ 0x30
 800391a:	4649      	mov	r1, r9
 800391c:	414b      	adcs	r3, r1
 800391e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800392c:	4659      	mov	r1, fp
 800392e:	00cb      	lsls	r3, r1, #3
 8003930:	4651      	mov	r1, sl
 8003932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003936:	4651      	mov	r1, sl
 8003938:	00ca      	lsls	r2, r1, #3
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	4603      	mov	r3, r0
 8003940:	4642      	mov	r2, r8
 8003942:	189b      	adds	r3, r3, r2
 8003944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003948:	464b      	mov	r3, r9
 800394a:	460a      	mov	r2, r1
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003960:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003968:	460b      	mov	r3, r1
 800396a:	18db      	adds	r3, r3, r3
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800396e:	4613      	mov	r3, r2
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800397a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800397e:	f7fc fc23 	bl	80001c8 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <UART_SetConfig+0x2d4>)
 8003988:	fba3 1302 	umull	r1, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	2164      	movs	r1, #100	@ 0x64
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	3332      	adds	r3, #50	@ 0x32
 800399a:	4a08      	ldr	r2, [pc, #32]	@ (80039bc <UART_SetConfig+0x2d4>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	f003 0207 	and.w	r2, r3, #7
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4422      	add	r2, r4
 80039ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039b0:	e106      	b.n	8003bc0 <UART_SetConfig+0x4d8>
 80039b2:	bf00      	nop
 80039b4:	40011000 	.word	0x40011000
 80039b8:	40011400 	.word	0x40011400
 80039bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039d2:	4642      	mov	r2, r8
 80039d4:	464b      	mov	r3, r9
 80039d6:	1891      	adds	r1, r2, r2
 80039d8:	6239      	str	r1, [r7, #32]
 80039da:	415b      	adcs	r3, r3
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039e2:	4641      	mov	r1, r8
 80039e4:	1854      	adds	r4, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb43 0501 	adc.w	r5, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	00eb      	lsls	r3, r5, #3
 80039f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fa:	00e2      	lsls	r2, r4, #3
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	4643      	mov	r3, r8
 8003a02:	18e3      	adds	r3, r4, r3
 8003a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a08:	464b      	mov	r3, r9
 8003a0a:	eb45 0303 	adc.w	r3, r5, r3
 8003a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a2e:	4629      	mov	r1, r5
 8003a30:	008b      	lsls	r3, r1, #2
 8003a32:	4621      	mov	r1, r4
 8003a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a38:	4621      	mov	r1, r4
 8003a3a:	008a      	lsls	r2, r1, #2
 8003a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a40:	f7fc fbc2 	bl	80001c8 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b60      	ldr	r3, [pc, #384]	@ (8003bcc <UART_SetConfig+0x4e4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011c      	lsls	r4, r3, #4
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	61b9      	str	r1, [r7, #24]
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a74:	4641      	mov	r1, r8
 8003a76:	1851      	adds	r1, r2, r1
 8003a78:	6139      	str	r1, [r7, #16]
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	414b      	adcs	r3, r1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	00cb      	lsls	r3, r1, #3
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a96:	4651      	mov	r1, sl
 8003a98:	00ca      	lsls	r2, r1, #3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	460a      	mov	r2, r1
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003abe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003acc:	4649      	mov	r1, r9
 8003ace:	008b      	lsls	r3, r1, #2
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	008a      	lsls	r2, r1, #2
 8003ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ade:	f7fc fb73 	bl	80001c8 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4b38      	ldr	r3, [pc, #224]	@ (8003bcc <UART_SetConfig+0x4e4>)
 8003aea:	fba3 2301 	umull	r2, r3, r3, r1
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2264      	movs	r2, #100	@ 0x64
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	1acb      	subs	r3, r1, r3
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	3332      	adds	r3, #50	@ 0x32
 8003afc:	4a33      	ldr	r2, [pc, #204]	@ (8003bcc <UART_SetConfig+0x4e4>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b08:	441c      	add	r4, r3
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b12:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	415b      	adcs	r3, r3
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	460a      	mov	r2, r1
 8003b5e:	eb42 0303 	adc.w	r3, r2, r3
 8003b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	008b      	lsls	r3, r1, #2
 8003b80:	4641      	mov	r1, r8
 8003b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b86:	4641      	mov	r1, r8
 8003b88:	008a      	lsls	r2, r1, #2
 8003b8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b8e:	f7fc fb1b 	bl	80001c8 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <UART_SetConfig+0x4e4>)
 8003b98:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2164      	movs	r1, #100	@ 0x64
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	3332      	adds	r3, #50	@ 0x32
 8003baa:	4a08      	ldr	r2, [pc, #32]	@ (8003bcc <UART_SetConfig+0x4e4>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 020f 	and.w	r2, r3, #15
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4422      	add	r2, r4
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bcc:	51eb851f 	.word	0x51eb851f

08003bd0 <malloc>:
 8003bd0:	4b02      	ldr	r3, [pc, #8]	@ (8003bdc <malloc+0xc>)
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	f000 b82d 	b.w	8003c34 <_malloc_r>
 8003bda:	bf00      	nop
 8003bdc:	2000020c 	.word	0x2000020c

08003be0 <free>:
 8003be0:	4b02      	ldr	r3, [pc, #8]	@ (8003bec <free+0xc>)
 8003be2:	4601      	mov	r1, r0
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	f000 b8f5 	b.w	8003dd4 <_free_r>
 8003bea:	bf00      	nop
 8003bec:	2000020c 	.word	0x2000020c

08003bf0 <sbrk_aligned>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8003c30 <sbrk_aligned+0x40>)
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	6831      	ldr	r1, [r6, #0]
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	b911      	cbnz	r1, 8003c02 <sbrk_aligned+0x12>
 8003bfc:	f000 f8ae 	bl	8003d5c <_sbrk_r>
 8003c00:	6030      	str	r0, [r6, #0]
 8003c02:	4621      	mov	r1, r4
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 f8a9 	bl	8003d5c <_sbrk_r>
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	d103      	bne.n	8003c16 <sbrk_aligned+0x26>
 8003c0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003c12:	4620      	mov	r0, r4
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	1cc4      	adds	r4, r0, #3
 8003c18:	f024 0403 	bic.w	r4, r4, #3
 8003c1c:	42a0      	cmp	r0, r4
 8003c1e:	d0f8      	beq.n	8003c12 <sbrk_aligned+0x22>
 8003c20:	1a21      	subs	r1, r4, r0
 8003c22:	4628      	mov	r0, r5
 8003c24:	f000 f89a 	bl	8003d5c <_sbrk_r>
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d1f2      	bne.n	8003c12 <sbrk_aligned+0x22>
 8003c2c:	e7ef      	b.n	8003c0e <sbrk_aligned+0x1e>
 8003c2e:	bf00      	nop
 8003c30:	20000380 	.word	0x20000380

08003c34 <_malloc_r>:
 8003c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c38:	1ccd      	adds	r5, r1, #3
 8003c3a:	f025 0503 	bic.w	r5, r5, #3
 8003c3e:	3508      	adds	r5, #8
 8003c40:	2d0c      	cmp	r5, #12
 8003c42:	bf38      	it	cc
 8003c44:	250c      	movcc	r5, #12
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	4606      	mov	r6, r0
 8003c4a:	db01      	blt.n	8003c50 <_malloc_r+0x1c>
 8003c4c:	42a9      	cmp	r1, r5
 8003c4e:	d904      	bls.n	8003c5a <_malloc_r+0x26>
 8003c50:	230c      	movs	r3, #12
 8003c52:	6033      	str	r3, [r6, #0]
 8003c54:	2000      	movs	r0, #0
 8003c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d30 <_malloc_r+0xfc>
 8003c5e:	f000 f869 	bl	8003d34 <__malloc_lock>
 8003c62:	f8d8 3000 	ldr.w	r3, [r8]
 8003c66:	461c      	mov	r4, r3
 8003c68:	bb44      	cbnz	r4, 8003cbc <_malloc_r+0x88>
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	f7ff ffbf 	bl	8003bf0 <sbrk_aligned>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	4604      	mov	r4, r0
 8003c76:	d158      	bne.n	8003d2a <_malloc_r+0xf6>
 8003c78:	f8d8 4000 	ldr.w	r4, [r8]
 8003c7c:	4627      	mov	r7, r4
 8003c7e:	2f00      	cmp	r7, #0
 8003c80:	d143      	bne.n	8003d0a <_malloc_r+0xd6>
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d04b      	beq.n	8003d1e <_malloc_r+0xea>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	4639      	mov	r1, r7
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	eb04 0903 	add.w	r9, r4, r3
 8003c90:	f000 f864 	bl	8003d5c <_sbrk_r>
 8003c94:	4581      	cmp	r9, r0
 8003c96:	d142      	bne.n	8003d1e <_malloc_r+0xea>
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	1a6d      	subs	r5, r5, r1
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ffa6 	bl	8003bf0 <sbrk_aligned>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d03a      	beq.n	8003d1e <_malloc_r+0xea>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	442b      	add	r3, r5
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	bb62      	cbnz	r2, 8003d10 <_malloc_r+0xdc>
 8003cb6:	f8c8 7000 	str.w	r7, [r8]
 8003cba:	e00f      	b.n	8003cdc <_malloc_r+0xa8>
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	1b52      	subs	r2, r2, r5
 8003cc0:	d420      	bmi.n	8003d04 <_malloc_r+0xd0>
 8003cc2:	2a0b      	cmp	r2, #11
 8003cc4:	d917      	bls.n	8003cf6 <_malloc_r+0xc2>
 8003cc6:	1961      	adds	r1, r4, r5
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	6025      	str	r5, [r4, #0]
 8003ccc:	bf18      	it	ne
 8003cce:	6059      	strne	r1, [r3, #4]
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	bf08      	it	eq
 8003cd4:	f8c8 1000 	streq.w	r1, [r8]
 8003cd8:	5162      	str	r2, [r4, r5]
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f82f 	bl	8003d40 <__malloc_unlock>
 8003ce2:	f104 000b 	add.w	r0, r4, #11
 8003ce6:	1d23      	adds	r3, r4, #4
 8003ce8:	f020 0007 	bic.w	r0, r0, #7
 8003cec:	1ac2      	subs	r2, r0, r3
 8003cee:	bf1c      	itt	ne
 8003cf0:	1a1b      	subne	r3, r3, r0
 8003cf2:	50a3      	strne	r3, [r4, r2]
 8003cf4:	e7af      	b.n	8003c56 <_malloc_r+0x22>
 8003cf6:	6862      	ldr	r2, [r4, #4]
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	bf0c      	ite	eq
 8003cfc:	f8c8 2000 	streq.w	r2, [r8]
 8003d00:	605a      	strne	r2, [r3, #4]
 8003d02:	e7eb      	b.n	8003cdc <_malloc_r+0xa8>
 8003d04:	4623      	mov	r3, r4
 8003d06:	6864      	ldr	r4, [r4, #4]
 8003d08:	e7ae      	b.n	8003c68 <_malloc_r+0x34>
 8003d0a:	463c      	mov	r4, r7
 8003d0c:	687f      	ldr	r7, [r7, #4]
 8003d0e:	e7b6      	b.n	8003c7e <_malloc_r+0x4a>
 8003d10:	461a      	mov	r2, r3
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	d1fb      	bne.n	8003d10 <_malloc_r+0xdc>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	6053      	str	r3, [r2, #4]
 8003d1c:	e7de      	b.n	8003cdc <_malloc_r+0xa8>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	6033      	str	r3, [r6, #0]
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 f80c 	bl	8003d40 <__malloc_unlock>
 8003d28:	e794      	b.n	8003c54 <_malloc_r+0x20>
 8003d2a:	6005      	str	r5, [r0, #0]
 8003d2c:	e7d6      	b.n	8003cdc <_malloc_r+0xa8>
 8003d2e:	bf00      	nop
 8003d30:	20000384 	.word	0x20000384

08003d34 <__malloc_lock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	@ (8003d3c <__malloc_lock+0x8>)
 8003d36:	f000 b84b 	b.w	8003dd0 <__retarget_lock_acquire_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	200004c4 	.word	0x200004c4

08003d40 <__malloc_unlock>:
 8003d40:	4801      	ldr	r0, [pc, #4]	@ (8003d48 <__malloc_unlock+0x8>)
 8003d42:	f000 b846 	b.w	8003dd2 <__retarget_lock_release_recursive>
 8003d46:	bf00      	nop
 8003d48:	200004c4 	.word	0x200004c4

08003d4c <memset>:
 8003d4c:	4402      	add	r2, r0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <_sbrk_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d06      	ldr	r5, [pc, #24]	@ (8003d78 <_sbrk_r+0x1c>)
 8003d60:	2300      	movs	r3, #0
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	f7fd f9dc 	bl	8001124 <_sbrk>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_sbrk_r+0x1a>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_sbrk_r+0x1a>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	200004c0 	.word	0x200004c0

08003d7c <__errno>:
 8003d7c:	4b01      	ldr	r3, [pc, #4]	@ (8003d84 <__errno+0x8>)
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2000020c 	.word	0x2000020c

08003d88 <__libc_init_array>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003dc0 <__libc_init_array+0x38>)
 8003d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003dc4 <__libc_init_array+0x3c>)
 8003d8e:	1b64      	subs	r4, r4, r5
 8003d90:	10a4      	asrs	r4, r4, #2
 8003d92:	2600      	movs	r6, #0
 8003d94:	42a6      	cmp	r6, r4
 8003d96:	d109      	bne.n	8003dac <__libc_init_array+0x24>
 8003d98:	4d0b      	ldr	r5, [pc, #44]	@ (8003dc8 <__libc_init_array+0x40>)
 8003d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003dcc <__libc_init_array+0x44>)
 8003d9c:	f000 f864 	bl	8003e68 <_init>
 8003da0:	1b64      	subs	r4, r4, r5
 8003da2:	10a4      	asrs	r4, r4, #2
 8003da4:	2600      	movs	r6, #0
 8003da6:	42a6      	cmp	r6, r4
 8003da8:	d105      	bne.n	8003db6 <__libc_init_array+0x2e>
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db0:	4798      	blx	r3
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7ee      	b.n	8003d94 <__libc_init_array+0xc>
 8003db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dba:	4798      	blx	r3
 8003dbc:	3601      	adds	r6, #1
 8003dbe:	e7f2      	b.n	8003da6 <__libc_init_array+0x1e>
 8003dc0:	08003ea0 	.word	0x08003ea0
 8003dc4:	08003ea0 	.word	0x08003ea0
 8003dc8:	08003ea0 	.word	0x08003ea0
 8003dcc:	08003ea4 	.word	0x08003ea4

08003dd0 <__retarget_lock_acquire_recursive>:
 8003dd0:	4770      	bx	lr

08003dd2 <__retarget_lock_release_recursive>:
 8003dd2:	4770      	bx	lr

08003dd4 <_free_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d041      	beq.n	8003e60 <_free_r+0x8c>
 8003ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de0:	1f0c      	subs	r4, r1, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfb8      	it	lt
 8003de6:	18e4      	addlt	r4, r4, r3
 8003de8:	f7ff ffa4 	bl	8003d34 <__malloc_lock>
 8003dec:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <_free_r+0x90>)
 8003dee:	6813      	ldr	r3, [r2, #0]
 8003df0:	b933      	cbnz	r3, 8003e00 <_free_r+0x2c>
 8003df2:	6063      	str	r3, [r4, #4]
 8003df4:	6014      	str	r4, [r2, #0]
 8003df6:	4628      	mov	r0, r5
 8003df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dfc:	f7ff bfa0 	b.w	8003d40 <__malloc_unlock>
 8003e00:	42a3      	cmp	r3, r4
 8003e02:	d908      	bls.n	8003e16 <_free_r+0x42>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	1821      	adds	r1, r4, r0
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	bf01      	itttt	eq
 8003e0c:	6819      	ldreq	r1, [r3, #0]
 8003e0e:	685b      	ldreq	r3, [r3, #4]
 8003e10:	1809      	addeq	r1, r1, r0
 8003e12:	6021      	streq	r1, [r4, #0]
 8003e14:	e7ed      	b.n	8003df2 <_free_r+0x1e>
 8003e16:	461a      	mov	r2, r3
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	b10b      	cbz	r3, 8003e20 <_free_r+0x4c>
 8003e1c:	42a3      	cmp	r3, r4
 8003e1e:	d9fa      	bls.n	8003e16 <_free_r+0x42>
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	1850      	adds	r0, r2, r1
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d10b      	bne.n	8003e40 <_free_r+0x6c>
 8003e28:	6820      	ldr	r0, [r4, #0]
 8003e2a:	4401      	add	r1, r0
 8003e2c:	1850      	adds	r0, r2, r1
 8003e2e:	4283      	cmp	r3, r0
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	d1e0      	bne.n	8003df6 <_free_r+0x22>
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	6053      	str	r3, [r2, #4]
 8003e3a:	4408      	add	r0, r1
 8003e3c:	6010      	str	r0, [r2, #0]
 8003e3e:	e7da      	b.n	8003df6 <_free_r+0x22>
 8003e40:	d902      	bls.n	8003e48 <_free_r+0x74>
 8003e42:	230c      	movs	r3, #12
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	e7d6      	b.n	8003df6 <_free_r+0x22>
 8003e48:	6820      	ldr	r0, [r4, #0]
 8003e4a:	1821      	adds	r1, r4, r0
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	bf04      	itt	eq
 8003e50:	6819      	ldreq	r1, [r3, #0]
 8003e52:	685b      	ldreq	r3, [r3, #4]
 8003e54:	6063      	str	r3, [r4, #4]
 8003e56:	bf04      	itt	eq
 8003e58:	1809      	addeq	r1, r1, r0
 8003e5a:	6021      	streq	r1, [r4, #0]
 8003e5c:	6054      	str	r4, [r2, #4]
 8003e5e:	e7ca      	b.n	8003df6 <_free_r+0x22>
 8003e60:	bd38      	pop	{r3, r4, r5, pc}
 8003e62:	bf00      	nop
 8003e64:	20000384 	.word	0x20000384

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
